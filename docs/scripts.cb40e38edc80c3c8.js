var f=Object.defineProperty,c=Object.defineProperties,d=Object.getOwnPropertyDescriptors,a=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,m=Object.prototype.propertyIsEnumerable,n=(e,r,t)=>r in e?f(e,r,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[r]=t,s=(e,r)=>{for(var t in r||(r={}))p.call(r,t)&&n(e,t,r[t]);if(a)for(var t of a(r))m.call(r,t)&&n(e,t,r[t]);return e},i=(e,r)=>c(e,d(r));Sym=String,Num=Number,List=Array,Procedure=function(e,r,t){return function(...l){return e.forEach((o,u)=>{t[o]=l[u]}),evaluate(r,t)}},standard_env=function(){return env={},Object.getOwnPropertyNames(Math).forEach(e=>{env[e]="Math."+e}),env=i(s({},env),{"+":(e,r)=>e+r,"-":(e,r)=>e-r,"*":(e,r)=>e*r,"/":(e,r)=>e/r,"=":(e,r)=>e===r,"<":(e,r)=>e<r,"<=":(e,r)=>e<=r,">":(e,r)=>e>r,">=":(e,r)=>e>=r,abs:e=>Math.abs(e),car:e=>e[0],cdr:e=>e.slice(1),cons:(e,r)=>[e].concat(r),"equal?":(e,r)=>e===r,length:e=>e.length,list:(...e)=>e,"list?":e=>e instanceof Array,max:(e,r)=>Math.max(e,r),min:(e,r)=>Math.min(e,r),not:e=>!e,null:e=>e==[]}),env},global_env=standard_env(),parse=function(e){return read_from_tokens(tokenize(e))},tokenize=function(e){return e.replaceAll("("," ( ").replaceAll(")"," ) ").split(" ").filter(r=>r.trim().length>0)},read_from_tokens=function(e){if(0==e.length)throw new SyntaxError("unexpected EOF while reading","lis.js",12);if(token=e.shift(),"("==token){for(var r=[];")"!=e[0];)r.push(read_from_tokens(e));return e.shift(),r}if(")"==token)throw new SyntaxError("unexpected )","lis.js",23);return atom(token)},atom=function(e){var r;if(e.includes(".")||e.includes("e")){if(r=parseFloat(e),!Object.is(NaN,r))return r}else if(r=parseInt(e),!Object.is(NaN,r))return r;return Sym(e)},lispstr=function(e){return e instanceof List?"("+e.join(" ")+")":e.toString()},evaluate=function(e,r=global_env){if("string"==typeof e)return r[e];if(!(e instanceof List))return e;if("quote"==e[0])return e[1];if("if"==e[0])return[_,test,conseq,alt]=e,exp=evaluate(test,r)?conseq:alt,evaluate(exp,r);if("define"!=e[0]){if("lambda"==e[0])return[_,params,body]=e,new Procedure(params,body,r);proc=evaluate(e[0],r),console.log(proc),args=[];for(let t of e.slice(1))arg=evaluate(t,r),args.push(arg);return proc(...args)}[_,variable,exp]=e,r[variable]=evaluate(exp,r)};var lis={tokenize,read_from_tokens,atom,standard_env,lispstr,evaluate,parse};