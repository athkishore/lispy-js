var f=Object.defineProperty,c=Object.defineProperties,d=Object.getOwnPropertyDescriptors,i=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,m=Object.prototype.propertyIsEnumerable,l=(e,t,r)=>t in e?f(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,s=(e,t)=>{for(var r in t||(t={}))p.call(t,r)&&l(e,r,t[r]);if(i)for(var r of i(t))m.call(t,r)&&l(e,r,t[r]);return e},o=(e,t)=>c(e,d(t));Sym=String,Num=Number,List=Array,Procedure=function(e,t,r){return function(...a){return e.forEach((n,u)=>{r[n]=a[u]}),evaluate(t,r)}},standard_env=function(){return env={},Object.getOwnPropertyNames(Math).forEach(e=>{env[e]="Math."+e}),env=o(s({},env),{"+":(e,t)=>e+t,"-":(e,t)=>e-t,"*":(e,t)=>e*t,"/":(e,t)=>e/t,"=":(e,t)=>e===t,"<":(e,t)=>e<t,"<=":(e,t)=>e<=t,">":(e,t)=>e>t,">=":(e,t)=>e>=t,abs:e=>Math.abs(e),begin:(...e)=>e[e.length-1],car:e=>e[0],cdr:e=>e.slice(1),cons:(e,t)=>[e].concat(t),"equal?":(e,t)=>e===t,length:e=>e.length,list:(...e)=>e,"list?":e=>e instanceof Array,max:(e,t)=>Math.max(e,t),min:(e,t)=>Math.min(e,t),not:e=>!e,null:e=>e==[]}),env},global_env=standard_env(),parse=function(e){return read_from_tokens(tokenize(e))},tokenize=function(e){return e.replaceAll("("," ( ").replaceAll(")"," ) ").split(" ").filter(t=>t.trim().length>0)},read_from_tokens=function(e){if(0==e.length)throw new SyntaxError("unexpected EOF while reading","lis.js",12);if(token=e.shift(),"("==token){for(var t=[];")"!=e[0];)t.push(read_from_tokens(e));return e.shift(),t}if(")"==token)throw new SyntaxError("unexpected )","lis.js",23);return atom(token)},atom=function(e){var t;if(e.includes(".")||e.includes("e")){if(t=parseFloat(e),!Object.is(NaN,t))return t}else if(t=parseInt(e),!Object.is(NaN,t))return t;return Sym(e)},lispstr=function(e){return e instanceof List?"("+e.join(" ")+")":e.toString()},evaluate=function(e,t=global_env){return"string"==typeof e?t[e]:e instanceof List?"quote"==e[0]?e[1]:"if"==e[0]?([_,test,conseq,alt]=e,exp=evaluate(test,t)?conseq:alt,evaluate(exp,t)):"define"!=e[0]?"lambda"==e[0]?([_,params,body]=e,new Procedure(params,body,t)):evaluate(e[0],t)(...e.slice(1).map(n=>evaluate(n,t))):([_,variable,exp]=e,void(t[variable]=evaluate(exp,t))):e},module.exports={tokenize,read_from_tokens,atom,standard_env,lispstr,repl,parse,evaluate};